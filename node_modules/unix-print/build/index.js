var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __require = typeof require !== "undefined" ? require : (x) => {
  throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
__export(exports, {
  getDefaultPrinter: () => getDefaultPrinter,
  getPrinters: () => getPrinters,
  print: () => print
});

// src/print/print.ts
var import_fs = __toModule(require("fs"));

// src/utils/exec-async.ts
"use strict";
var { exec } = require("child_process");
var util = require("util");
var execAsync = util.promisify(exec);
var exec_async_default = execAsync;

// src/print/print.ts
function print(file, printer, options) {
  return __async(this, null, function* () {
    if (!file)
      throw "No file specified";
    if (!import_fs.default.existsSync(file))
      throw "No such file";
    const args = [file];
    if (printer) {
      args.push("-d", printer);
    }
    if (options) {
      if (!Array.isArray(options))
        throw "options should be an array";
      options.forEach((arg) => args.push(arg));
    }
    return exec_async_default(`lp ${args.join(" ")}`);
  });
}

// src/utils/parse-printer-description.ts
function parsePrinterDescription(stdout) {
  const descriptionLine = stdout.split("\n").slice(1).find((line) => line.indexOf("Description") !== -1);
  return descriptionLine ? descriptionLine.split(":")[1].trim() : "";
}

// src/get-default-printer/get-default-printer.ts
function getDefaultPrinter() {
  return __async(this, null, function* () {
    try {
      const { stdout } = yield exec_async_default("lpstat -d");
      const printer = getPrinterName(stdout);
      if (!printer)
        return null;
      return {
        printer,
        description: yield getPrinterDescription(printer)
      };
    } catch (error) {
      throw error;
    }
  });
}
function getPrinterName(output) {
  const startIndex = output.indexOf(":");
  return startIndex === -1 ? "" : output.substr(startIndex + 1).trim();
}
function getPrinterDescription(printer) {
  return __async(this, null, function* () {
    const { stdout } = yield exec_async_default(`lpstat -lp ${printer}`);
    return parsePrinterDescription(stdout);
  });
}

// src/get-printers/get-printers.ts
function getPrinters() {
  return __async(this, null, function* () {
    try {
      const { stdout } = yield exec_async_default("lpstat -lp");
      const isThereAnyPrinter = stdout.match("printer");
      if (!isThereAnyPrinter)
        return [];
      return stdout.split(/^printer(.)/gm).filter((line) => line.trim().length).map((line) => ({
        printer: line.substr(0, line.indexOf(" ")),
        description: parsePrinterDescription(line)
      }));
    } catch (error) {
      throw error;
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDefaultPrinter,
  getPrinters,
  print
});
